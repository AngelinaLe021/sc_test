/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package testrun

import org.http4k.core.Request
import org.http4k.core.Response
import org.http4k.core.HttpHandler
import org.http4k.core.Method
import org.http4k.core.Body
import org.http4k.core.Status.Companion.OK
// import kotlinx.serialization.Serializable
// import org.http4k.format.KotlinxSerialization.auto
// import org.http4k.lens.BiDiBodyLens
// import org.http4k.format.Jackson.auto

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import org.http4k.core.with
import org.http4k.format.Jackson
import org.http4k.format.Jackson.auto
import org.http4k.format.Jackson.asJsonArray
import org.http4k.format.Jackson.asJsonObject
import org.http4k.format.Jackson.asJsonValue
import org.http4k.format.Jackson.asPrettyJsonString
import org.http4k.format.Jackson.json
// import org.http4k.lens.FormField
// import org.http4k.lens.int

fun main() {

    //Access data from the 3rd party API using POST and GET Method
    val searchApp: HttpHandler = { request: Request -> Response(OK).body("https://api.github.com/orgs/${request.query("search")}/repos")}
    val searchRequest = Request(Method.GET, "/").query("search", "http4k")
    var searchResponse = searchApp(searchRequest)
    println(searchResponse)

    //Parsing JSON Data from the URL to data class

    //Push them to the following format after extracting them
    val objectUsingExtensionFunctions: JsonNode = listOf(
        "id" to "idNum".asJsonValue(),
        "full_name" to "Full Name".asJsonValue(),
        "owner" to listOf("owner".asJsonValue()).asJsonArray(),
        "html_url" to "htmlUrl".asJsonValue(),
        "description" to "description".asJsonValue()
    ).asJsonObject()


    val jsonString: String = objectUsingExtensionFunctions.asPrettyJsonString()
    println(jsonString)
    
    //Accessing the owner array to extract the avatar_url
    //Store it in a server
    

}

// import org.http4k.core.Body
// import org.http4k.core.HttpHandler
// import org.http4k.core.Method.GET
// import org.http4k.core.Method.POST
// import org.http4k.core.Response
// import org.http4k.core.Status.Companion.OK
// import org.http4k.core.with
// import org.http4k.format.Jackson.auto
// import org.http4k.routing.bind
// import org.http4k.routing.routes
// import org.http4k.server.SunHttp
// import org.http4k.server.asServer
// import java.time.Clock
// import java.time.Instant
// import kotlin.random.Random



// data class JsonData(val idNum: Int,
//                     val fullName: String,
//                     val OwnerSet: Array<Any>,
//                     val htmlUrl: String,
//                     val description: String)
// fun JsonDataApi(HttpHandler: HttpHandler): HttpHandler {
//     val jsonLens = Body.auto<JsonData>().toLens()

//     return routes(
//         "/search" bind POST to{
//             val received = bodyLens(it)
//             Response(OK).with(bodyLens of received)
//         },

//         "/" bind GET to { request: Request ->
//             val search = request.query("search", "http4k")
//             Response(OK).body("https://api.github.com/orgs/${request.query("search")}/repos"))}


//             Response(OK).with(bodyLens of JsonData(Int.get("id"), String.get("full_name", Array.get("OwnerSet", String.get("html_Url"), String.get("description") 
//         }
//     )
// }

// fun main() {
//     JsonApi(String.http4k, HttpHandler.asServer(SunHttp(8080)).start()
// }/*
 